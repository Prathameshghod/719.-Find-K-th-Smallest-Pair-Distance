***************************** 719. Find K-th Smallest Pair Distance  ****************************************************************************************

# Python Code 

class Solution:
    def count_pair(self, nums, mid):
        count = 0
        j = 0
        for i in range(len(nums)):
            
            while j < len(nums) and nums[j] - nums[i] <= mid:
                j+=1 
            count += j-i-1 
        return count
    
    def smallestDistancePair(self, nums: List[int], k: int) -> int:
        
        nums.sort()
        
        low , high = 0 , max(nums) - min(nums)
        
        while low < high:
            
            mid = ( low + high)//2
            
            if self.count_pair(nums , mid) >= k:
                high = mid 
            else:
                low = mid + 1
            
        return low 

//// C++ Code ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Solution {
public:
    int count_pair(const vector<int>& nums, int mid){
        int count = 0;
        int j= 0;
        for ( int i =0 ; i< nums.size(); ++i){
            while (j< nums.size() && nums[j] - nums[i] <= mid){
                j++;
            }
            count += j-i-1;
        }
        return count;
    }    
    int smallestDistancePair(vector<int>& nums, int k) {
        sort(nums.begin(), nums.end());
        
        int low = 0;
        int high = nums.back() - nums[0];
        
        while (low < high){
            
            int mid = low + (high - low ) / 2;
            
            if (count_pair(nums , mid) >= k){
                high = mid;
                
            }
            
            else{
                low = mid + 1;
            }        }
        return low;
    }
};
